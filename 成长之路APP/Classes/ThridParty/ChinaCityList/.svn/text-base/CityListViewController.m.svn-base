//
//  CityListViewController.m
//  ChinaCityList
//
//  Created by zjq on 15/10/27.
//  Copyright © 2015年 zhengjq. All rights reserved.
//

#import "CityListViewController.h"
#import "ZYPinYinSearch.h"
#import "ButtonGroupView.h"
#import "PinYinForObjc.h"
#import <CoreLocation/CoreLocation.h>
#import "CityInfo.h"

#define KSectionIndexBackgroundColor  [UIColor clearColor] //索引试图未选中时的背景颜色
#define kSectionIndexTrackingBackgroundColor [UIColor lightGrayColor]//索引试图选中时的背景
#define kSectionIndexColor [UIColor redColor]//索引试图字体颜色
#define HotBtnColumns 3 //每行显示的热门城市数
#define BGCOLOR [UIColor colorWithRed:240/255.0 green:240/255.0 blue:240/255.0 alpha:1]

@interface CityListViewController ()<UIGestureRecognizerDelegate,UISearchBarDelegate,UITextFieldDelegate,ButtonGroupViewDelegate, CLLocationManagerDelegate>
{
    UIImageView   *_bgImageView;
    UIView        *_tipsView;
    UILabel       *_tipsLab;
    NSTimer       *_timer;
    
    CLLocationManager   *locationManager;
    CLGeocoder          *geocoder; // 地理位置解码编码器

}
@property (strong, nonatomic) UITextField *searchText;

@property (strong, nonatomic) NSMutableDictionary *searchResultDic;

@property (strong, nonatomic) ButtonGroupView *locatingCityGroupView;//定位城市

@property (strong, nonatomic) ButtonGroupView *hotCityGroupView;//热门城市

@property (strong, nonatomic) ButtonGroupView *historicalCityGroupView; //历史使用城市/常用城市/当前城市

@property (strong, nonatomic) UIView *tableHeaderView;

@property (strong, nonatomic) NSMutableArray *arrayCitys;   //城市数据

@property (strong, nonatomic) NSMutableDictionary *cities;  //分类城市数据

@property (strong, nonatomic) NSMutableArray *keys; //城市首字母
@end

@implementation CityListViewController

- (id)init
{
    self = [super init];
    if (self) {
        // Custom initialization
        _arrayHotCity = [NSMutableArray array];
        _arrayHistoricalCity = [NSMutableArray array];
        _arrayLocatingCity   = [NSMutableArray array];
        _keys = [NSMutableArray array];
        _arrayCitys = [NSMutableArray array];
        _cities = [NSMutableDictionary dictionary];
        
        locationManager = [[CLLocationManager alloc] init];
        locationManager.desiredAccuracy = kCLLocationAccuracyBest;
        locationManager.distanceFilter = 100;
        locationManager.delegate = self;
        [locationManager requestAlwaysAuthorization];
    }
    return self;
}

- (void)viewDidLoad
{
    [super viewDidLoad];
    
    self.view.backgroundColor = BGCOLOR;
    
    if ([[CityInfo getCitys] count]) {
        [self getCityData];
    }
    else {
        [self getCityInfo];
    }
    
    [self positionCity];
    
    self.title = [NSString stringWithFormat:@"当前城市-%@", [self.arrayHistoricalCity lastObject] ?: @""];
    self.navigationItem.leftBarButtonItem = [UIBarButtonItem leftBarButtonItemWithImage:[UIImage imageNamed:@"返回"] highlighted:[UIImage imageNamed:@"返回"] target:self selector:@selector(back)];

    
    //3自定义背景
    
    UIView *searchView = [[UIView alloc] initWithFrame:CGRectMake(0, 64, self.view.frame.size.width, 40*(self.view.frame.size.height/568))];
    searchView.backgroundColor = [UIColor clearColor];
    
    UIImageView *searchBg = [[UIImageView alloc]initWithImage:[UIImage imageNamed:@"搜索背景"]];
    searchBg.frame = CGRectMake(0, 0, searchView.frame.size.width, searchView.frame.size.height);
    [searchView addSubview:searchBg];
    
    //搜索框
    _searchText = [[UITextField alloc]initWithFrame:CGRectMake(30*(self.view.frame.size.width/320), 0, self.view.frame.size.width-30, searchView.frame.size.height)];
    _searchText.backgroundColor = [UIColor clearColor];
    _searchText.font = [UIFont systemFontOfSize:13];
    _searchText.placeholder  = @"请输入城市名称或首字母";
    _searchText.returnKeyType = UIReturnKeySearch;
    _searchText.textColor    = [UIColor colorWithRed:58/255.0 green:58/255.0 blue:58/255.0 alpha:1];
    _searchText.delegate     = self;
    [_searchText addTarget:self action:@selector(textChange:) forControlEvents:UIControlEventEditingChanged];
    [searchView addSubview:_searchText];

    [self.view addSubview:searchView];

    
	// Do any additional setup after loading the view.
    _tableView = [[UITableView alloc] initWithFrame:self.view.bounds style:UITableViewStylePlain];
    _tableView.frame           = CGRectMake(0,searchView.frame.origin.y+searchView.frame.size.height, self.view.frame.size.width, self.view.frame.size.height-64-40*(self.view.frame.size.height/568));
    _tableView.backgroundColor = [UIColor clearColor];
    _tableView.delegate        = self;
    _tableView.dataSource      = self;
    [self.view addSubview:_tableView];
    
    [self ininHeaderView];
    
    //添加单击事件 取消键盘第一响应
    UITapGestureRecognizer *tap = [[UITapGestureRecognizer alloc]initWithTarget:self action:@selector(resignFirstResponder:)];
    tap.delegate = self;
    [self.view addGestureRecognizer:tap];
}

#pragma mark - 
#pragma mark 定位城市

-(void)positionCity
{
    if ([CLLocationManager locationServicesEnabled])
    {
        [locationManager startUpdatingLocation];
        geocoder = [[CLGeocoder alloc] init];
    }
    else
    {
        //定位关闭
        UIAlertController *alert = [UIAlertController alertControllerWithTitle:@"定位关闭" message:@"检测到您的定位没有开启，请前往设置中心开启定位服务" preferredStyle:UIAlertControllerStyleAlert];
        
        [alert addAction:[UIAlertAction actionWithTitle:@"我知道了" style:UIAlertActionStyleDestructive handler:nil]];
        
        //解决弹出慢问题
        dispatch_async(dispatch_get_main_queue(), ^{
            [self presentViewController:alert animated:YES completion:nil];
        });
        
        //默认经纬度
        NSDictionary *dic=[NSDictionary dictionaryWithObjectsAndKeys:KDEFAULTLAT,@"lat",KDEFAULTLNG,@"lng",nil];
        [CityListViewController setUserLocation:dic];
        
        [CityListViewController setLocationCity:[CityItem initWithTitleName:@"北京"]];
        
        [_arrayLocatingCity removeAllObjects];
        [_arrayLocatingCity addObject:@"定位关闭"];
        _locatingCityGroupView.items = [self GetCityDataSoucre:_arrayLocatingCity];
    }
}

//定位
-(void)locationManager:(CLLocationManager *)manager didUpdateLocations:(NSArray *)locations
{
    //此处存储了持续更新的位置坐标值，取最后一个值为最新位置
    CLLocation *currentLocation = [locations lastObject];
    CLLocationCoordinate2D coor = currentLocation.coordinate;
    NSString *lat=[NSString stringWithFormat:@"%f",coor.latitude];
    NSString *lng=[NSString stringWithFormat:@"%f",coor.longitude];
    //保存当前定位经纬度
    NSDictionary *dic=[NSDictionary dictionaryWithObjectsAndKeys:lat,@"lat",lng,@"lng",nil];
    [CityListViewController setUserLocation:dic];
    
    //CLLocation *newLocation = [[CLLocation alloc]initWithLatitude:34.76 longitude:113.65];
    
    __weak typeof(self) weakSelf = self;
    //CLGeocoder反向通过经纬度,获得城市名
    [geocoder reverseGeocodeLocation:currentLocation completionHandler:
     ^(NSArray *placemarks, NSError *error)
     {
         CLPlacemark *place = placemarks[0];
         NSString *cityName=place.locality; // 城市
         if ([cityName rangeOfString:@"市辖区"].location != NSNotFound  ) {
             cityName = place.administrativeArea;
         }
         
         //将市去掉
         cityName = [cityName substringToIndex:cityName.length - 1];
         
         //保存定位城市信息
         CityItem *tempItem;
         for (NSArray* items in [_cities allValues]) {
             for (CityItem *item in items) {
                 if ([item.name hasPrefix:cityName]) {
                     tempItem = item;
                 }
             }
         }
         
         if (!tempItem) {
             tempItem = [CityItem initWithTitleName:cityName];
         }
         
         [CityListViewController setLocationCity:tempItem];
         
         [_arrayLocatingCity removeAllObjects];
         [_arrayLocatingCity addObject:cityName ? tempItem : @"定位失败"];
         weakSelf.locatingCityGroupView.items = [weakSelf GetCityDataSoucre:_arrayLocatingCity];

     }];
    manager.delegate = nil;
    [manager stopUpdatingLocation];
}

//定位失败
- (void)locationManager:(CLLocationManager *)manager didFailWithError:(NSError *)error
{
    //默认经纬度
    NSDictionary *dic=[NSDictionary dictionaryWithObjectsAndKeys:KDEFAULTLAT,@"lat",KDEFAULTLNG,@"lng",nil];
    [CityListViewController setUserLocation:dic];
    
    [CityListViewController setLocationCity:[CityItem initWithTitleName:@"北京"]];

    [_arrayLocatingCity removeAllObjects];
    [_arrayLocatingCity addObject:@"定位失败"];
    _locatingCityGroupView.items = [self GetCityDataSoucre:_arrayLocatingCity];
    
    [manager stopUpdatingLocation];
}

- (void)locationManager:(CLLocationManager *)manager didChangeAuthorizationStatus:(CLAuthorizationStatus)status
{
    switch (status)
    {
        case kCLAuthorizationStatusNotDetermined:
            if ([locationManager respondsToSelector:@selector(requestAlwaysAuthorization)])
            {
                [locationManager requestWhenInUseAuthorization];
            }
            break;
        default:
            break;
    }
}

#pragma mark -
#pragma mark 事件

- (void)resignFirstResponder:(UITapGestureRecognizer*)tap
{
    [_searchText resignFirstResponder];
    
}

-(BOOL)gestureRecognizer:(UIGestureRecognizer *)gestureRecognizer shouldReceiveTouch:(UITouch *)touch

{
    
    if ([NSStringFromClass([touch.view class]) isEqualToString:@"UITableViewCellContentView"]) {//如果当前是tableView
  
        return NO;
        
    }
    
    return YES;
    
}

- (void)textChange:(UITextField*)textField
{
    [self filterContentForSearchText:textField.text];
}

- (void)textFieldDidBeginEditing:(UITextField *)textField
{
    
}

- (BOOL)textFieldShouldReturn:(UITextField *)textField
{
    [textField resignFirstResponder];
    return YES;
    
}

- (void)back
{
    if (!_arrayHistoricalCity.count) {
        if (_delegate) {
            
            [_delegate didClickedWithCity:[CityListViewController getLocationCity]];
        }
        
        [CityListViewController setUserSelectCity:[CityListViewController getLocationCity]];
    }
    [self dismissViewControllerAnimated:YES completion:nil];
}

- (void)ininHeaderView
{
    _tableHeaderView = [[UIView alloc]initWithFrame:CGRectMake(0, 0, _tableView.frame.size.width, 250)];
    _tableHeaderView.backgroundColor = [UIColor clearColor];
    
    
    //定位城市
    UILabel *title1 = [[UILabel alloc]initWithFrame:CGRectMake(10, 10, 160, 21)];
    title1.text = @"定位城市";
    title1.font = [UIFont systemFontOfSize:15];
    [_tableHeaderView addSubview:title1];
    
    _locatingCityGroupView = [[ButtonGroupView alloc]initWithFrame:CGRectMake(0, title1.frame.origin.y+title1.frame.size.height+10, _tableHeaderView.frame.size.width, 45)];
    _locatingCityGroupView.delegate = self;
    _locatingCityGroupView.columns = 3;
    if (!_arrayLocatingCity.count) {
        [_arrayLocatingCity addObject:@"正在定位"];
    }
    _locatingCityGroupView.items = [self GetCityDataSoucre:_arrayLocatingCity];
    [_tableHeaderView addSubview:_locatingCityGroupView];
    
    
    //当前城市

    UILabel *title2 = [[UILabel alloc]initWithFrame:CGRectMake(10, _locatingCityGroupView.frame.origin.y+_locatingCityGroupView.frame.size.height+10, 160, 21)];
    title2.text = @"当前城市";
    title2.font = [UIFont systemFontOfSize:15];
    [_tableHeaderView addSubview:title2];
    
    
    long rowHistorical = _arrayHistoricalCity.count/3;
    if (_arrayHistoricalCity.count%3 > 0) {
        rowHistorical += 1;
    }
    CGFloat hisViewHight = 45*rowHistorical;
    _historicalCityGroupView = [[ButtonGroupView alloc]initWithFrame:CGRectMake(0, title2.frame.origin.y+title2.frame.size.height+10, _tableHeaderView.frame.size.width, hisViewHight)];
    _historicalCityGroupView.backgroundColor = [UIColor clearColor];
    _historicalCityGroupView.delegate = self;
    _historicalCityGroupView.columns = 3;
    _historicalCityGroupView.items = [self GetCityDataSoucre:_arrayHistoricalCity];
    [_tableHeaderView addSubview:_historicalCityGroupView];
    
    //热门城市
    UILabel *title3 = [[UILabel alloc]initWithFrame:CGRectMake(10, _historicalCityGroupView.frame.origin.y+_historicalCityGroupView.frame.size.height+10, 160, 21)];
    title3.text = @"热门城市";
    title3.font = [UIFont systemFontOfSize:15];
    [_tableHeaderView addSubview:title3];
    
    
    long row = _arrayHotCity.count/3;
    if (_arrayHotCity.count%3 > 0) {
        row += 1;
    }
    CGFloat hotViewHight = 45*row;
    _hotCityGroupView = [[ButtonGroupView alloc]initWithFrame:CGRectMake(0, title3.frame.origin.y+title3.frame.size.height+10, _tableHeaderView.frame.size.width, hotViewHight)];
    _hotCityGroupView.backgroundColor = [UIColor clearColor];
    _hotCityGroupView.delegate = self;
    _hotCityGroupView.columns = 3;
    _hotCityGroupView.items = [self GetCityDataSoucre:_arrayHotCity];
    [_tableHeaderView addSubview:_hotCityGroupView];
    
    
    _tableHeaderView.frame = CGRectMake(0, 0, _tableView.frame.size.width, _hotCityGroupView.frame.origin.y+_hotCityGroupView.frame.size.height);
    _tableView.tableHeaderView.frame = _tableHeaderView.frame;
    _tableView.tableHeaderView = _tableHeaderView;
    
    
}

- (NSArray*)GetCityDataSoucre:(NSArray*)ary
{
    NSMutableArray *cityAry = [[NSMutableArray alloc]init];
    [ary enumerateObjectsUsingBlock:^(id  _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) {
       
        if ([obj isKindOfClass:[NSString class]]) {
            [cityAry addObject: [CityItem initWithTitleName:obj]];
        }
        else if ([obj isKindOfClass:[CityItem class]]) {
            [cityAry addObject:obj];
        }
    }];
    
    return cityAry;
}

#pragma mark - 获取城市数据
-(void)getCityData
{
    NSArray *cities = [CityInfo getCitys];
    NSMutableArray *arr = [[NSMutableArray alloc]init];

    for (int i=0; i<[cities count]; i++)
    {
        CityItem *item = [cities objectAtIndex:i];
        if ([item.TYPE isEqualToString:@"1"])
        {
            [arr addObject:item];
        }
    }
    
    NSMutableArray *groupArr = [[NSMutableArray alloc]init];
    BOOL compareAtIndex = NO;
    for (int i = 0; i<arr.count; i++)
    {
        NSString *str;
        CityItem *item = [arr objectAtIndex:i];

        if (![item.PINYIN isEqualToString:@""]) {
            str = [item.PINYIN substringToIndex:1];
        }
        
        if (str) {
            if (![self.keys containsObject:[str capitalizedString]])
            {
                [self.keys addObject:[str capitalizedString]];
                groupArr = [[NSMutableArray alloc]init];
                [groupArr addObject:[arr objectAtIndex:i]];
                
                compareAtIndex = NO;
            }
            else
            {
                [[self.cities objectForKey:[str capitalizedString]] addObject:[arr objectAtIndex:i]];
            }
            
        }
        
        if (compareAtIndex == NO)
        {
            [self.cities setObject:groupArr forKey:[str capitalizedString]];
            compareAtIndex = YES;
        }
    }
    [self.keys sortUsingComparator:^NSComparisonResult(id obj1, id obj2)
     {
         NSString *string1 = (NSString *)obj1;
         NSString *string2 = (NSString *)obj2;
         return [string1 compare:string2];
     }];
    
    NSArray *allValuesAry = [self.cities allValues];
    for (NSArray*oneAry in allValuesAry) {
        
        for (CityItem *cityItem in oneAry) {
            [_arrayCitys addObject:cityItem];
        }
    }
    
    [self positionCity];
}

- (void)getCityInfo
{
    __weak typeof(self) weakSelf = self;
    
    [XMCenter sendRequest:^(XMRequest * _Nonnull request) {
        request.api = @"common/listCity.do";
        request.httpMethod = kXMHTTPMethodGET;
        request.parameters = @{@"type" : @"1"};
        
    } onSuccess:^(id  _Nullable responseObject) {
        //获取成功
        if ([[responseObject objectForKey:@"code"] isEqualToString:@"200"]) {
            NSArray *cityList = [[responseObject objectForKey:@"data"] objectForKey:@"clst"];
            [CityInfo saveCityInfo:cityList];
            
            [weakSelf getCityData];
            [weakSelf.tableView reloadData];
        }
        else {
            [MBProgressHUD showMessage:@"获取城市数据失败"];
            MJExtensionLog(@"返回Code：%@", [responseObject objectForKey:@"code"]);
        }
        
    } onFailure:^(NSError * _Nullable error) {
        [MBProgressHUD showMessage:@"获取城市数据失败"];
        MJExtensionLog(@"%@", error);
    }];
}

#pragma mark - tableView
-(CGFloat)tableView:(UITableView *)tableView heightForHeaderInSection:(NSInteger)section
{
    return 20.0;
}

-(UIView *)tableView:(UITableView *)tableView viewForHeaderInSection:(NSInteger)section
{
    UIView *bgView = [[UIView alloc] initWithFrame:CGRectMake(0, 0, tableView.frame.size.width, 20)];
    bgView.backgroundColor = BGCOLOR;
    
    UILabel *titleLabel = [[UILabel alloc] initWithFrame:CGRectMake(13, 0, 250, 20)];
    titleLabel.backgroundColor = [UIColor clearColor];
    titleLabel.textColor = [UIColor blackColor];
    titleLabel.font = [UIFont systemFontOfSize:15];
    
    UIImageView *line = [[UIImageView alloc]initWithFrame:CGRectMake(0, 19, bgView.frame.size.width, 1)];
    line.backgroundColor = [UIColor colorWithRed:220/255.0 green:220/255.0 blue:220/255.0 alpha:1];
    
    
    NSString *key = [_keys objectAtIndex:section];

    titleLabel.text = key;
    [bgView addSubview:line];

    [bgView addSubview:titleLabel];
    
    return bgView;
}

- (NSArray *)sectionIndexTitlesForTableView:(UITableView *)tableView
{
    
    NSMutableArray *indexNumber = [NSMutableArray arrayWithArray:_keys];
//    NSString *strHot = @"#";
//    //添加搜索前的#号
//    [indexNumber insertObject:strHot atIndex:0];
    return indexNumber;
}

- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView
{
    // Return the number of sections.
    return [_keys count];
}

- (NSInteger)tableView:(UITableView *)tableView sectionForSectionIndexTitle:(NSString *)title atIndex:(NSInteger)index
{
//    MJExtensionLog(@"title = %@",title);
    [self showTipsWithTitle:title];
    
    return index;
}

- (void)scrollViewWillBeginDragging:(UIScrollView *)scrollView
{
    [_searchText resignFirstResponder];
}

- (void)showTipsWithTitle:(NSString*)title
{
    
    //获取当前屏幕window
    UIWindow *window = [UIApplication sharedApplication].keyWindow;
    //添加黑色透明背景
//    if (!_bgImageView) {
//        _bgImageView = [[UIImageView alloc]initWithFrame:CGRectMake(0, 0, window.frame.size.width, window.frame.size.height)];
//        _bgImageView.backgroundColor = [UIColor blackColor];
//        _bgImageView.alpha = 0.1;
//        [window addSubview:_bgImageView];
//    }
    if (!_tipsView) {
        //添加字母提示框
        _tipsView = [[UIView alloc]initWithFrame:CGRectMake(0, 0, 80, 80)];
        _tipsView.center = window.center;
        _tipsView.backgroundColor = [UIColor colorWithRed:0.95 green:0.95 blue:0.95 alpha:0.8];
        //设置提示框圆角
        _tipsView.layer.masksToBounds = YES;
        _tipsView.layer.cornerRadius  = _tipsView.frame.size.width/20;
        _tipsView.layer.borderColor   = [UIColor whiteColor].CGColor;
        _tipsView.layer.borderWidth   = 2;
        [window addSubview:_tipsView];
    }
    if (!_tipsLab) {
        //添加提示字母lable
        _tipsLab = [[UILabel alloc]initWithFrame:CGRectMake(0, 0, _tipsView.frame.size.width, _tipsView.frame.size.height)];
        //设置背景为透明
        _tipsLab.backgroundColor = [UIColor clearColor];
        _tipsLab.font = [UIFont boldSystemFontOfSize:50];
        _tipsLab.textAlignment = NSTextAlignmentCenter;
        
        [_tipsView addSubview:_tipsLab];
    }
   _tipsLab.text = title;//设置当前显示字母
    
//    [self performSelector:@selector(hiddenTipsView:) withObject:nil afterDelay:0.3];
//    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.3 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
//        [self hiddenTipsView];
//    });
    
    
    _timer = [NSTimer timerWithTimeInterval:1 target:self selector:@selector(hiddenTipsView) userInfo:nil repeats:NO];
    [[NSRunLoop mainRunLoop] addTimer:_timer forMode:NSRunLoopCommonModes];
    
}

- (void)hiddenTipsView
{
    
    [UIView animateWithDuration:0.2 animations:^{
        _bgImageView.alpha = 0;
        _tipsView.alpha = 0;
    } completion:^(BOOL finished) {
        [_bgImageView removeFromSuperview];
        [_tipsView removeFromSuperview];
         _bgImageView = nil;
         _tipsLab     = nil;
         _tipsView    = nil;
    }];
}

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
{
    // Return the number of rows in the section.
    NSString *key = [_keys objectAtIndex:section];
    NSArray *citySection = [_cities objectForKey:key];
    return [citySection count];
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
{
    
    if ([_tableView respondsToSelector:@selector(setSectionIndexColor:)]) {
        _tableView.sectionIndexBackgroundColor = KSectionIndexBackgroundColor;  //修改索引试图未选中时的背景颜色
        _tableView.sectionIndexTrackingBackgroundColor = kSectionIndexTrackingBackgroundColor;//修改索引试图选中时的背景颜色
        _tableView.sectionIndexColor = kSectionIndexColor;//修改索引试图字体颜色
    }
    
    
    static NSString *CellIdentifier = @"Cell";
    
    NSString *key = [_keys objectAtIndex:indexPath.section];
    
    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:CellIdentifier];
    if (cell == nil) {
        cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:CellIdentifier] ;
        cell.backgroundColor = [UIColor clearColor];
        cell.contentView.backgroundColor = [UIColor clearColor];
        cell.selectionStyle = UITableViewCellSelectionStyleNone;
        [cell.textLabel setTextColor:[UIColor blackColor]];
        cell.textLabel.font = [UIFont systemFontOfSize:18];
    }
    cell.textLabel.text = [(CityItem*)[[_cities objectForKey:key] objectAtIndex:indexPath.row] name];
    return cell;
}

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(nonnull NSIndexPath *)indexPath
{
    [tableView deselectRowAtIndexPath:indexPath animated:YES];
    
    NSString *key = [_keys objectAtIndex:indexPath.section];
    if (_delegate) {
        [_delegate didClickedWithCity:[[_cities objectForKey:key] objectAtIndex:indexPath.row]];
    }
    
    [CityListViewController setUserSelectCity:[[_cities objectForKey:key] objectAtIndex:indexPath.row]];
    [self dismissViewControllerAnimated:YES completion:nil];
    
}


-(void)ButtonGroupView:(ButtonGroupView *)buttonGroupView didClickedItem:(CityButton *)item
{
    if ([item.cityItem.name isEqualToString:@"定位关闭"] || [item.cityItem.name isEqualToString:@"定位失败"]) {
        [self dismissViewControllerAnimated:YES completion:nil];
        return;
    }
    
    if (_delegate) {
       
        [_delegate didClickedWithCity:item.cityItem];
    }
    
    [CityListViewController setUserSelectCity:item.cityItem];
    
    [self dismissViewControllerAnimated:YES completion:nil];
}

/**
 *  通过搜索条件过滤得到搜索结果
 *
 *  @param searchText 关键词
 *  @param scope      范围
 */
- (void)filterContentForSearchText:(NSString*)searchText {
    
    if (searchText.length > 0) {
        _searchResultDic = nil;
        _searchResultDic = [[NSMutableDictionary alloc]init];
        
        //搜索数组中是否含有关键字
        NSArray *resultAry  = [ZYPinYinSearch searchWithOriginalArray:_arrayCitys andSearchText:searchText andSearchByPropertyName:@"name"];
        //     MJExtensionLog(@"搜索结果:%@",resultAry) ;
        
        for (CityItem *city in resultAry) {
            //获取字符串拼音首字母并转为大写
            NSString *pinYinHead = [PinYinForObjc chineseConvertToPinYinHead:city.name].uppercaseString;
            NSString *firstHeadPinYin = [pinYinHead substringToIndex:1]; //拿到字符串第一个字的首字母
            //        MJExtensionLog(@"pinYin = %@",firstHeadPinYin);
            
            
            NSMutableArray *cityAry = [NSMutableArray arrayWithArray:[_searchResultDic objectForKey:firstHeadPinYin]]; //取出首字母数组
            
            if (cityAry != nil) {
                
                [cityAry addObject:city];
                
                NSArray *sortCityArr = [cityAry sortedArrayUsingFunction:cityNameSort context:NULL];
                [_searchResultDic setObject:sortCityArr forKey:firstHeadPinYin];
            }
            else
            {
                cityAry= [[NSMutableArray alloc]init];
                [cityAry addObject:city];
                NSArray *sortCityArr = [cityAry sortedArrayUsingFunction:cityNameSort context:NULL];
                [_searchResultDic setObject:sortCityArr forKey:firstHeadPinYin];
            }
            
            
            
        }
        //    MJExtensionLog(@"dic = %@",dic);

        if (resultAry.count>0) {
            [_cities removeAllObjects];
            _cities = _searchResultDic;
            [_keys removeAllObjects];
            //按字母升序排列
            [_keys addObjectsFromArray:[[self.cities allKeys] sortedArrayUsingSelector:@selector(compare:)]] ;
            _tableView.tableHeaderView = nil;
            [_tableView reloadData];
        }

    }else
    {
        //当字符串清空时 回到初始状态
        [_cities removeAllObjects];
         [_keys removeAllObjects];
        [_arrayCitys removeAllObjects];
        [self getCityData];
        _tableView.tableHeaderView = _tableHeaderView;
        [_tableView reloadData];
    }
    
   
}

@end
